name: Full Infra + App Deployment with SonarCloud Scan

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  terraform:
    runs-on: windows-latest
    defaults:
      run:
        working-directory: ./infra
    env:
      TF_BACKEND_RESOURCE_GROUP: ${{ secrets.TF_BACKEND_RESOURCE_GROUP }}
      TF_BACKEND_STORAGE_ACCOUNT: ${{ secrets.TF_BACKEND_STORAGE_ACCOUNT }}
      TF_BACKEND_CONTAINER: ${{ secrets.TF_BACKEND_CONTAINER }}
      TF_BACKEND_KEY: ${{ secrets.TF_BACKEND_KEY }}
      RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}
      KEY_VAULT_NAME: ${{ secrets.KEY_VAULT_NAME }}

    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - name: üîê Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: üöÄ Terraform Init
        shell: pwsh
        run: |
          terraform init `
            -backend-config="resource_group_name=${{ env.TF_BACKEND_RESOURCE_GROUP }}" `
            -backend-config="storage_account_name=${{ env.TF_BACKEND_STORAGE_ACCOUNT }}" `
            -backend-config="container_name=${{ env.TF_BACKEND_CONTAINER }}" `
            -backend-config="key=${{ env.TF_BACKEND_KEY }}"

      - name: üìê Terraform Plan
        shell: pwsh
        run: terraform plan

      - name: üèóÔ∏è Terraform Apply
        shell: pwsh
        run: terraform apply -auto-approve

      - name: üîé Fetch App Name and DB Connection from Azure
        id: outputs
        shell: pwsh
        run: |
          $webAppName = az webapp list --resource-group $env:RESOURCE_GROUP_NAME --query "[0].name" -o tsv
          if (-not $webAppName) {
            Write-Error "‚ùå Could not find any Web App in the resource group."
            exit 1
          }

          $dbConnString = az keyvault secret show `
            --vault-name $env:KEY_VAULT_NAME `
            --name DbConnectionString `
            --query value -o tsv

          if (-not $dbConnString) {
            Write-Error "‚ùå Could not fetch DB Connection String from Key Vault."
            exit 1
          }

          echo "webapp_name=$webAppName" >> $env:GITHUB_OUTPUT
          echo "db_conn_string=$dbConnString" >> $env:GITHUB_OUTPUT

    outputs:
      WEBAPP_NAME: ${{ steps.outputs.outputs.webapp_name }}
      DB_CONN_STRING: ${{ steps.outputs.outputs.db_conn_string }}

# ---------------- SONAR JOB -----------------

  sonarcloud:
    runs-on: ubuntu-latest
    needs: terraform
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_PROJECT_KEY: workinghardonazure_devflow-employee-management
      SONAR_ORG: workinghardonazure

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ env.SONAR_ORG }}
            -Dsonar.sources=./employee-user-management

# ---------------- DEPLOY JOB -----------------

  build-and-deploy:
    runs-on: windows-latest
    needs: [terraform, sonarcloud]
    defaults:
      run:
        working-directory: ./employee-user-management
    env:
      WEBAPP_NAME: ${{ needs.terraform.outputs.WEBAPP_NAME }}
      DB_CONNECTION_STRING: ${{ needs.terraform.outputs.DB_CONN_STRING }}
      RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}
      DOTNET_CLI_HOME: ${{ github.workspace }}

    steps:
      - uses: actions/checkout@v4

      - id: sln
        shell: pwsh
        run: |
          $sln = Get-ChildItem -Path . -Filter *.sln -Recurse | Select-Object -First 1
          echo "sln_path=$($sln.FullName)" >> $env:GITHUB_OUTPUT

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - run: dotnet restore ${{ steps.sln.outputs.sln_path }}
      - run: dotnet build ${{ steps.sln.outputs.sln_path }} --configuration Release
      - run: dotnet publish ${{ steps.sln.outputs.sln_path }} --configuration Release --output "${{ runner.temp }}\WebAppContent"

      - shell: pwsh
        run: |
          Write-Host "üß™ DB_CONNECTION_STRING: $env:DB_CONNECTION_STRING"
          if (-not $env:DB_CONNECTION_STRING) {
            Write-Error "‚ùå DB_CONNECTION_STRING is not set. Failing early..."
            exit 1
          }

      - shell: pwsh
        run: |
          mkdir ./tools
          dotnet tool install --tool-path ./tools dotnet-ef --version 9.0.1
          $env:PATH = "$PWD/tools;$env:PATH"
          dotnet-ef database update --project ./EmployeeManagement.App/EmployeeManagement.App.csproj

      - run: |
          mkdir ${{ runner.temp }}\package
          Compress-Archive -Path "${{ runner.temp }}\WebAppContent\*" -DestinationPath "${{ runner.temp }}\package\WebApp.zip"

      - shell: pwsh
        run: |
          $profile = az webapp deployment list-publishing-profiles `
            --name $env:WEBAPP_NAME `
            --resource-group $env:RESOURCE_GROUP_NAME `
            --xml
          Set-Content -Path "${{ runner.temp }}\publish-profile.xml" -Value $profile

      - uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.WEBAPP_NAME }}
          publish-profile: ${{ runner.temp }}\publish-profile.xml
          package: ${{ runner.temp }}\package\WebApp.zip
