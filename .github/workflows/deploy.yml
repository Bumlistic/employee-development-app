name: Full Infra + App Deployment with SonarCloud scan

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  # -----------------------------
  # Stage 1: Terraform Deployment
  # -----------------------------
  terraform:
    name: Terraform Deployment
    runs-on: windows-latest

    env:
      TF_BACKEND_RESOURCE_GROUP: ${{ secrets.TF_BACKEND_RESOURCE_GROUP }}
      TF_BACKEND_STORAGE_ACCOUNT: ${{ secrets.TF_BACKEND_STORAGE_ACCOUNT }}
      TF_BACKEND_CONTAINER: ${{ secrets.TF_BACKEND_CONTAINER }}
      TF_BACKEND_KEY: ${{ secrets.TF_BACKEND_KEY }}
      RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform Init
        shell: pwsh
        run: |
          terraform init `
            -backend-config="resource_group_name=${{ env.TF_BACKEND_RESOURCE_GROUP }}" `
            -backend-config="storage_account_name=${{ env.TF_BACKEND_STORAGE_ACCOUNT }}" `
            -backend-config="container_name=${{ env.TF_BACKEND_CONTAINER }}" `
            -backend-config="key=${{ env.TF_BACKEND_KEY }}"

      - name: Terraform Plan
        shell: pwsh
        run: terraform plan

      - name: Terraform Apply
        shell: pwsh
        run: terraform apply -auto-approve

      - name: Save Web App Name
        id: webapp
        shell: pwsh
        run: |
          $webAppName = terraform output -raw devflow_app_service_name
          echo "webapp_name=$webAppName" >> $env:GITHUB_OUTPUT

    outputs:
      WEBAPP_NAME: ${{ steps.webapp.outputs.webapp_name }}

  # --------------------------------------
  # Stage 2: Build, Migrate, Deploy App
  # --------------------------------------
  build-and-deploy:
    name: Build, Migrate, Deploy
    runs-on: windows-latest
    needs: terraform  # Wait for Terraform job
    env:
      WEBAPP_NAME: ${{ needs.terraform.outputs.WEBAPP_NAME }}
      RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}
      DOTNET_CLI_HOME: ${{ github.workspace }}
      DB_CONNECTION_STRING: ${{ secrets.DB_CONNECTION_STRING }}

    steps:
      - name: Checkout App Repository
        uses: actions/checkout@v3
        with:
          repository: Bumlistic/clone-from-azure-app-folder
          path: app-code
          fetch-depth: 0

      - name: Setup .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          args: >
            -Dsonar.projectKey=workinghardonazure_devflow-employee-management
            -Dsonar.organization=workinghardonazure
            -Dsonar.sources=./app-code
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Restore NuGet Packages
        shell: pwsh
        run: dotnet restore ./app-code/*.sln

      - name: Build Solution
        shell: pwsh
        run: dotnet build ./app-code/*.sln --configuration Release

      - name: Publish Web Application
        shell: pwsh
        run: dotnet publish ./app-code/*.sln --configuration Release --output ${{ runner.temp }}\WebAppContent\

      - name: Install EF Core Tools Locally & Run Migrations
        shell: pwsh
        run: |
          dotnet tool install --tool-path ./tools dotnet-ef --version 9.0.1
          ./tools/dotnet-ef database update --project ./app-code/EmployeeManagement.App/EmployeeManagement.App.csproj
        env:
          ConnectionStrings__DefaultConnection: ${{ secrets.DB_CONNECTION_STRING }}

      - name: Archive Files
        shell: pwsh
        run: |
          mkdir ${{ runner.temp }}\package
          Compress-Archive -Path "${{ runner.temp }}\WebAppContent\*" -DestinationPath "${{ runner.temp }}\package\WebApp.zip"

      - name: Get Web App Publish Profile
        shell: pwsh
        run: |
          $profile = az webapp deployment list-publishing-profiles `
            --name $env:WEBAPP_NAME `
            --resource-group $env:RESOURCE_GROUP_NAME `
            --xml
          Set-Content -Path "${{ runner.temp }}\publish-profile.xml" -Value $profile

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.WEBAPP_NAME }}
          publish-profile: ${{ runner.temp }}\publish-profile.xml
          package: ${{ runner.temp }}\package\WebApp.zip
