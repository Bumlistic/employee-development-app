name: Full Infra + App Deployment with SonarCloud scan

on:
  push:
    branches:
      - main
  workflow_dispatch:

jobs:
  # -----------------------------
  # Terraform Deployment Job
  # -----------------------------
  terraform:
    name: Terraform Deployment
    runs-on: windows-latest

    env:
      TF_BACKEND_RESOURCE_GROUP: ${{ secrets.TF_BACKEND_RESOURCE_GROUP }}
      TF_BACKEND_STORAGE_ACCOUNT: ${{ secrets.TF_BACKEND_STORAGE_ACCOUNT }}
      TF_BACKEND_CONTAINER: ${{ secrets.TF_BACKEND_CONTAINER }}
      TF_BACKEND_KEY: ${{ secrets.TF_BACKEND_KEY }}
      RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform Init
        shell: pwsh
        run: |
          terraform init `
            -backend-config="resource_group_name=${{ env.TF_BACKEND_RESOURCE_GROUP }}" `
            -backend-config="storage_account_name=${{ env.TF_BACKEND_STORAGE_ACCOUNT }}" `
            -backend-config="container_name=${{ env.TF_BACKEND_CONTAINER }}" `
            -backend-config="key=${{ env.TF_BACKEND_KEY }}"

      - name: Terraform Plan
        shell: pwsh
        run: terraform plan

      - name: Terraform Apply
        shell: pwsh
        run: terraform apply -auto-approve

      - name: Save Web App Name
        id: webapp
        shell: pwsh
        run: |
          $webAppName = terraform output -raw devflow_app_service_name
          echo "webapp_name=$webAppName" >> $env:GITHUB_OUTPUT

    outputs:
      WEBAPP_NAME: ${{ steps.webapp.outputs.webapp_name }}

# -----------------------------
# Build, SonarCloud Scan, EF Migrations, and Deployment Job
# -----------------------------
  build-and-deploy:
    name: Build + SonarCloud + Deploy
    runs-on: ubuntu-latest
    needs: terraform
    env:
      WEBAPP_NAME: ${{ needs.terraform.outputs.WEBAPP_NAME }}
      RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}
      DB_CONNECTION_STRING: ${{ secrets.DB_CONNECTION_STRING }}
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_PROJECT_KEY: workinghardonazure_devflow-employee-management
      SONAR_ORG: workinghardonazure

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      # -----------------------------
      # Debug: check where the .sln file is
      # -----------------------------
      - name: List repository files
        run: ls -R

      # -----------------------------
      # Set up .NET 9
      # -----------------------------
      - name: Setup .NET 9
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      # -----------------------------
      # Restore, Build, Publish
      # -----------------------------
      - name: Restore NuGet Packages
        run: dotnet restore <path-to-your-sln-file> # e.g., EmployeeManagement/EmployeeManagement.sln

      - name: Build Solution
        run: dotnet build <path-to-your-sln-file> --configuration Release

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        with:
          args: >
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ env.SONAR_ORG }}
            -Dsonar.sources=.
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

      - name: Run Database Migrations
        run: dotnet ef database update --project EmployeeManagement.App/EmployeeManagement.App.csproj
        env:
          ConnectionStrings__DefaultConnection: ${{ secrets.DB_CONNECTION_STRING }}

      - name: Publish Web Application
        run: dotnet publish <path-to-your-sln-file> -c Release -o ${{ runner.temp }}/WebAppContent

      - name: Archive Files
        run: |
          mkdir -p ${{ runner.temp }}/package
          zip -r ${{ runner.temp }}/package/WebApp.zip ${{ runner.temp }}/WebAppContent/*

      - name: Get Web App Publish Profile
        run: |
          az webapp deployment list-publishing-profiles \
            --name $WEBAPP_NAME \
            --resource-group $RESOURCE_GROUP_NAME \
            --xml > ${{ runner.temp }}/publish-profile.xml

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.WEBAPP_NAME }}
          publish-profile: ${{ runner.temp }}/publish-profile.xml
          package: ${{ runner.temp }}/package/WebApp.zip
