name: Full Infra + App Deployment with SonarCloud Scan

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  terraform:
    runs-on: windows-latest
    defaults:
      run:
        working-directory: ./infra
    env:
      TF_BACKEND_RESOURCE_GROUP: ${{ secrets.TF_BACKEND_RESOURCE_GROUP }}
      TF_BACKEND_STORAGE_ACCOUNT: ${{ secrets.TF_BACKEND_STORAGE_ACCOUNT }}
      TF_BACKEND_CONTAINER: ${{ secrets.TF_BACKEND_CONTAINER }}
      TF_BACKEND_KEY: ${{ secrets.TF_BACKEND_KEY }}
      RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}
      AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: latest

      - uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Debug Azure Storage Access
        shell: pwsh
        run: |
          Write-Host "üü¢ Checking Storage Account and Container Access..."
          az storage account list --resource-group $env:TF_BACKEND_RESOURCE_GROUP --output table

          $storageKey = az storage account keys list --resource-group $env:TF_BACKEND_RESOURCE_GROUP --account-name $env:TF_BACKEND_STORAGE_ACCOUNT --query '[0].value' -o tsv
          Write-Host "üü¢ Using Storage Key: $storageKey"

          az storage container list --account-name $env:TF_BACKEND_STORAGE_ACCOUNT --account-key $storageKey --output table

      - name: Terraform Init with Debug
        shell: pwsh
        run: |
          terraform init `
            -backend-config="resource_group_name=${{ env.TF_BACKEND_RESOURCE_GROUP }}" `
            -backend-config="storage_account_name=${{ env.TF_BACKEND_STORAGE_ACCOUNT }}" `
            -backend-config="container_name=${{ env.TF_BACKEND_CONTAINER }}" `
            -backend-config="key=${{ env.TF_BACKEND_KEY }}" `
            -input=false `
            -no-color `
            -upgrade
          if ($LASTEXITCODE -ne 0) {
            Write-Error "‚ùå terraform init failed. Aborting..."
            exit 1
          }

      - name: Terraform Plan
        shell: pwsh
        run: |
          terraform plan
          if ($LASTEXITCODE -ne 0) {
            Write-Error "‚ùå terraform plan failed. Aborting..."
            exit 1
          }

      - name: Terraform Apply
        shell: pwsh
        run: |
          terraform apply -auto-approve
          if ($LASTEXITCODE -ne 0) {
            Write-Error "‚ùå terraform apply failed. Aborting..."
            exit 1
          }

      # >> New diagnostics to inspect state
      - name: Terraform Show State
        shell: pwsh
        run: |
          Write-Host "üßê Inspecting terraform state..."
          terraform show
          Write-Host "üßê Listing resources in state:"
          terraform state list

      - id: terraform-outputs
        shell: pwsh
        run: |
          Write-Host "üìù Running terraform output -json for debugging:"
          $outputsJson = terraform output -json
          if ([string]::IsNullOrEmpty($outputsJson)) {
            Write-Error "‚ùå terraform output -json returned empty!"
            exit 1
          }
          Write-Host "Outputs JSON: $outputsJson"

          $outputs = $outputsJson | ConvertFrom-Json

          $webAppName = $outputs.devflow_app_service_name.value
          $dbConnString = $outputs.devflow_db_connection_string.value

          Write-Host "‚úÖ Terraform Outputs:"
          Write-Host "Web App Name: $webAppName"
          Write-Host "DB Connection String: $dbConnString"

          if ([string]::IsNullOrEmpty($webAppName) -or [string]::IsNullOrEmpty($dbConnString)) {
            Write-Error "‚ùå One or more required outputs are missing. Aborting..."
            exit 1
          }

          echo "webapp_name=$webAppName" >> $env:GITHUB_OUTPUT
          echo "db_conn_string=$dbConnString" >> $env:GITHUB_OUTPUT

    outputs:
      WEBAPP_NAME: ${{ steps.terraform-outputs.outputs.webapp_name }}
      DB_CONN_STRING: ${{ steps.terraform-outputs.outputs.db_conn_string }}

  sonarcloud:
    runs-on: ubuntu-latest
    needs: terraform
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_PROJECT_KEY: workinghardonazure_devflow-employee-management
      SONAR_ORG: workinghardonazure
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ env.SONAR_ORG }}
            -Dsonar.sources=./employee-user-management

  build-and-deploy:
    runs-on: windows-latest
    needs: [terraform, sonarcloud]
    defaults:
      run:
        working-directory: ./employee-user-management
    env:
      WEBAPP_NAME: ${{ needs.terraform.outputs.WEBAPP_NAME }}
      DB_CONNECTION_STRING: ${{ needs.terraform.outputs.DB_CONN_STRING }}
      RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}
      DOTNET_CLI_HOME: ${{ github.workspace }}
    steps:
      - uses: actions/checkout@v4

      - id: sln
        shell: pwsh
        run: |
          $sln = Get-ChildItem -Path . -Filter *.sln -Recurse | Select-Object -First 1
          echo "sln_path=$($sln.FullName)" >> $env:GITHUB_OUTPUT

      - uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - run: dotnet restore ${{ steps.sln.outputs.sln_path }}
      - run: dotnet build ${{ steps.sln.outputs.sln_path }} --configuration Release
      - run: dotnet publish ${{ steps.sln.outputs.sln_path }} --configuration Release --output "${{ runner.temp }}\WebAppContent"

      - shell: pwsh
        run: |
          Write-Host "üß™ DB_CONNECTION_STRING: $env:DB_CONNECTION_STRING"
          if (-not $env:DB_CONNECTION_STRING) {
            Write-Error "‚ùå DB_CONNECTION_STRING is not set. Failing early..."
            exit 1
          }

      - shell: pwsh
        run: |
          mkdir ./tools
          dotnet tool install --tool-path ./tools dotnet-ef --version 9.0.1
          $env:PATH = "$PWD/tools;$env:PATH"
          dotnet-ef database update --project ./EmployeeManagement.App/EmployeeManagement.App.csproj

      - run: |
          mkdir ${{ runner.temp }}\package
          Compress-Archive -Path "${{ runner.temp }}\WebAppContent\*" -DestinationPath "${{ runner.temp }}\package\WebApp.zip"

      - shell: pwsh
        run: |
          $profile = az webapp deployment list-publishing-profiles `
            --name $env:WEBAPP_NAME `
            --resource-group $env:RESOURCE_GROUP_NAME `
            --xml
          Set-Content -Path "${{ runner.temp }}\publish-profile.xml" -Value $profile

      - uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.WEBAPP_NAME }}
          publish-profile: ${{ runner.temp }}\publish-profile.xml
          package: ${{ runner.temp }}\package\WebApp.zip
