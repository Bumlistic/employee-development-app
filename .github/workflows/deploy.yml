name: Full Infra + App Deployment with SonarCloud Scan

on:
  push:
    branches:
      - main
  workflow_dispatch:

# -----------------------------
# Terraform Deployment Job
# -----------------------------
jobs:
  terraform:
    name: Terraform Deployment
    runs-on: windows-latest

    env:
      TF_BACKEND_RESOURCE_GROUP: ${{ secrets.TF_BACKEND_RESOURCE_GROUP }}
      TF_BACKEND_STORAGE_ACCOUNT: ${{ secrets.TF_BACKEND_STORAGE_ACCOUNT }}
      TF_BACKEND_CONTAINER: ${{ secrets.TF_BACKEND_CONTAINER }}
      TF_BACKEND_KEY: ${{ secrets.TF_BACKEND_KEY }}
      RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: latest

      - name: Azure Login
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Terraform Init
        shell: pwsh
        run: |
          terraform init `
            -backend-config="resource_group_name=${{ env.TF_BACKEND_RESOURCE_GROUP }}" `
            -backend-config="storage_account_name=${{ env.TF_BACKEND_STORAGE_ACCOUNT }}" `
            -backend-config="container_name=${{ env.TF_BACKEND_CONTAINER }}" `
            -backend-config="key=${{ env.TF_BACKEND_KEY }}"

      - name: Terraform Plan
        shell: pwsh
        run: terraform plan

      - name: Terraform Apply
        shell: pwsh
        run: terraform apply -auto-approve

      - name: Save Infra Outputs
        id: infra
        shell: pwsh
        run: |
          $webAppName   = terraform output -raw devflow_app_service_name
          $dbConnString = terraform output -raw devflow_db_connection_string
          echo "webapp_name=$webAppName"   >> $env:GITHUB_OUTPUT
          echo "db_conn_string=$dbConnString" >> $env:GITHUB_OUTPUT

    outputs:
      WEBAPP_NAME: ${{ steps.infra.outputs.webapp_name }}
      DB_CONN_STRING: ${{ steps.infra.outputs.db_conn_string }}

# -----------------------------
# SonarCloud Scan Job (Linux)
# -----------------------------
  sonarcloud:
    name: SonarCloud Scan
    runs-on: ubuntu-latest
    needs: terraform
    env:
      SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      SONAR_PROJECT_KEY: workinghardonazure_devflow-employee-management
      SONAR_ORG: workinghardonazure

    steps:
      - name: Checkout App Repository
        uses: actions/checkout@v3
        with:
          repository: Bumlistic/clone-from-azure-app-folder
          token: ${{ secrets.GITHUB_TOKEN }}
          path: app-code
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Run SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v2
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        with:
          args: >
            -Dsonar.projectKey=${{ env.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ env.SONAR_ORG }}
            -Dsonar.sources=./app-code

# -----------------------------
# Build & Deploy Job (Windows)
# -----------------------------
  build-and-deploy:
    name: Build & Deploy App
    runs-on: windows-latest
    needs: [terraform, sonarcloud]
    env:
      WEBAPP_NAME: ${{ needs.terraform.outputs.WEBAPP_NAME }}
      DB_CONNECTION_STRING: ${{ needs.terraform.outputs.DB_CONN_STRING }}
      RESOURCE_GROUP_NAME: ${{ secrets.RESOURCE_GROUP_NAME }}
      DOTNET_CLI_HOME: ${{ github.workspace }}

    steps:
      - name: Checkout App Repository
        uses: actions/checkout@v3
        with:
          repository: Bumlistic/clone-from-azure-app-folder
          token: ${{ secrets.GITHUB_TOKEN }}
          path: app-code
          fetch-depth: 0

      # -----------------------------
      # Auto-detect .sln file
      # -----------------------------
      - name: Find solution file
        id: sln
        shell: pwsh
        run: |
          $sln = Get-ChildItem -Path ./app-code -Filter *.sln -Recurse | Select-Object -First 1
          if (-not $sln) { Write-Error "No .sln file found!" }
          echo "sln_path=$($sln.FullName)" >> $env:GITHUB_OUTPUT

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0.x'

      - name: Restore NuGet Packages
        run: dotnet restore ${{ steps.sln.outputs.sln_path }}

      - name: Build Solution
        run: dotnet build ${{ steps.sln.outputs.sln_path }} --configuration Release

      - name: Publish Web Application
        run: dotnet publish ${{ steps.sln.outputs.sln_path }} --configuration Release --output "${{ runner.temp }}\WebAppContent"

      # -----------------------------
      # Run EF Core Migrations
      # -----------------------------
      - name: Run EF Core Migrations
        shell: pwsh
        env:
         DB_CONNECTION_STRING: ${{ needs.terraform.outputs.DB_CONN_STRING }}
        run: |
          mkdir ./tools
          dotnet tool install --tool-path ./tools dotnet-ef --version 9.0.1
          $env:PATH = "$PWD/tools;$env:PATH"

          Write-Host "Using DB connection string from Terraform (masked)."
          dotnet-ef database update --project ./app-code/EmployeeManagement.App/EmployeeManagement.App.csproj

      - name: Archive Files
        run: |
          mkdir ${{ runner.temp }}\package
          Compress-Archive -Path "${{ runner.temp }}\WebAppContent\*" -DestinationPath "${{ runner.temp }}\package\WebApp.zip"

      - name: Get Web App Publish Profile
        shell: pwsh
        run: |
          $profile = az webapp deployment list-publishing-profiles `
            --name $env:WEBAPP_NAME `
            --resource-group $env:RESOURCE_GROUP_NAME `
            --xml
          Set-Content -Path "${{ runner.temp }}\publish-profile.xml" -Value $profile

      - name: Deploy to Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          app-name: ${{ env.WEBAPP_NAME }}
          publish-profile: ${{ runner.temp }}\publish-profile.xml
          package: ${{ runner.temp }}\package\WebApp.zip
